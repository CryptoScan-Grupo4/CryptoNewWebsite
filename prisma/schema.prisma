generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model funcionario {
  idFuncionario    Int       @id @default(autoincrement())
  nomeFuncionario  String?   @db.VarChar(45)
  rgFuncionario    String?   @db.Char(10)
  cpfFuncionario   String?   @db.VarChar(45)
  emailFuncionario String?   @db.VarChar(45)
  Senha            String?   @db.VarChar(45)
  fkTipoConta      Int
  fkEmpresa        Int?
  empresa          empresa?  @relation(fields: [fkEmpresa], references: [idEmpresa], onDelete: NoAction, onUpdate: NoAction, map: "funcionario_ibfk_1")
  tipoconta        tipoconta @relation(fields: [fkTipoConta], references: [idTipoConta], onUpdate: NoAction, map: "funcionario_ibfk_2")
  setor            setor[]

  @@index([fkEmpresa], map: "fkEmpresa")
  @@index([fkTipoConta], map: "fkTipoConta")
}

model componente {
  idComponente      Int                 @id @default(autoincrement())
  nomeModelo        String?             @db.VarChar(45)
  modeloComponente  String?             @db.VarChar(45)
  tipoComponente    String?             @db.VarChar(45)
  fkSetup           Int?
  setup             setup?              @relation(fields: [fkSetup], references: [idSetup], onDelete: NoAction, onUpdate: NoAction, map: "componente_ibfk_1")
  medida            medida[]
  unidadecomponente unidadecomponente[]

  @@index([fkSetup], map: "fkSetup")
}

model computador {
  idComputador     Int     @unique @default(autoincrement())
  serialComputador String? @db.VarChar(45)
  statusAtividade  String? @db.VarChar(10)
  fkEmpresa        Int
  fkSetor          Int?
  empresa          empresa @relation(fields: [fkEmpresa], references: [idEmpresa], onUpdate: NoAction, map: "computador_ibfk_1")
  setor            setor?  @relation(fields: [fkSetor], references: [idSetor], onDelete: NoAction, onUpdate: NoAction, map: "computador_ibfk_2")
  setup            setup[]

  @@id([idComputador, fkEmpresa])
  @@index([fkSetor], map: "fkSetor")
  @@index([fkEmpresa], map: "fkEmpresa")
}

model empresa {
  idEmpresa   Int           @id @default(autoincrement())
  nomeEmpresa String?       @db.VarChar(45)
  telEmpresa  String?       @db.Char(10)
  cepEmpresa  String?       @db.Char(9)
  numEndereco String?       @db.VarChar(10)
  cpnjEmpresa String?       @db.VarChar(45)
  fkToken     Int?
  computador  computador[]
  token       token?        @relation(fields: [fkToken], references: [idToken], onDelete: NoAction, onUpdate: NoAction, map: "empresa_ibfk_1")
  funcionario funcionario[]
  setor       setor[]

  @@index([fkToken], map: "fkToken")
}

model setor {
  idSetor                  Int          @unique @default(autoincrement())
  Andar                    String?      @db.VarChar(45)
  fkEmpresa                Int
  fkFuncionarioResponsavel Int?
  computador               computador[]
  funcionario              funcionario? @relation(fields: [fkFuncionarioResponsavel], references: [idFuncionario], onDelete: NoAction, onUpdate: NoAction, map: "setor_ibfk_1")
  empresa                  empresa      @relation(fields: [fkEmpresa], references: [idEmpresa], onUpdate: NoAction, map: "setor_ibfk_2")

  @@id([idSetor, fkEmpresa])
  @@index([fkEmpresa], map: "fkEmpresa")
  @@index([fkFuncionarioResponsavel], map: "fkFuncionarioResponsavel")
}

model setup {
  idSetup      Int          @unique @default(autoincrement())
  fkComputador Int
  dataCriacao  DateTime     @default(now())
  componente   componente[]
  medida       medida[]
  computador   computador   @relation(fields: [fkComputador], references: [idComputador], onUpdate: NoAction, map: "setup_ibfk_1")

  @@id([idSetup, fkComputador])
  @@index([fkComputador], map: "fkComputador")
}

model tipoconta {
  idTipoConta Int           @id @default(autoincrement())
  tipoConta   String?       @db.VarChar(45)
  funcionario funcionario[]
}

model token {
  idToken     Int       @id @default(autoincrement())
  token       String?   @db.VarChar(45)
  dataEmitida DateTime  @default(now())
  empresa     empresa[]
}

model medida {
  idMedida       Int        @default(autoincrement())
  medida         Float?
  dataHoraMedida DateTime   @default(now())
  fkComponente   Int
  fkSetup        Int
  componente     componente @relation(fields: [fkComponente], references: [idComponente], onUpdate: NoAction, map: "medida_ibfk_1")
  setup          setup      @relation(fields: [fkSetup], references: [idSetup], onUpdate: NoAction, map: "medida_ibfk_2")

  @@id([idMedida, fkComponente, fkSetup])
  @@index([fkSetup], map: "fkSetup")
  @@index([fkComponente], map: "fkComponente")
}

model unidadecomponente {
  idUnidadeComponente Int         @id @default(autoincrement())
  unidadeComponente   String?     @db.VarChar(45)
  totalComponente     Float?
  fkComponente        Int?
  componente          componente? @relation(fields: [fkComponente], references: [idComponente], onDelete: NoAction, onUpdate: NoAction, map: "unidadecomponente_ibfk_1")

  @@index([fkComponente], map: "fkComponente")
}
